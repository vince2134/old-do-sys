<?php
/*
 * 履歴：
 *  日付            B票No.      担当者      内容
 *  -----------------------------------------------------------
 *  2007/04/02      B0702-019   kajioka-h   FCで直営のみ有効商品が使えてしまうバグ修正
 *                  B0702-020   kajioka-h   未承認商品が使えてしまうバグ修正
 *                  B0702-024   kajioka-h   在庫管理しない商品が使えてしまうバグ修正
 *  2007/06/05                  watanabe-k  商品が入力できないバグの修正
 *  2007/06/05                  watanabe-k  行追加後にフォーカスが移動しないバグの修正
 *  2009/03/13                  hashimoto-y 入力した商品とは違う商品が移動されるバグの修正
 *  2009/07/10                  aoyama-n    在庫受払照会で移動の受払先に「自倉庫」と表示されるバグの修正
 *  2009/10/12                  hashimoto-y 在庫管理フラグをショップ別商品情報テーブルに変更
 *  2009/10/15                  hashimoto-y 2009/10/12の修正漏れ
 */

$page_title = "在庫移動入力";

//環境設定ファイル
require_once("ENV_local.php");

//HTML_QuickFormを作成
$form =& new HTML_QuickForm("dateForm", "POST", "$_SERVER[PHP_SELF]");

//DB接続
$db_con = Db_Connect();

// 権限チェック
$auth       = Auth_Check($db_con);
// ボタンDisabled
$disabled   = ($auth[0] == "r") ? "disabled" : null;

/****************************/
//外部変数取得
/****************************/
$shop_id     = $_SESSION["client_id"];   //取引先ID
//$shop_gid    = $_SESSION["shop_gid"];    //FCグループID
$staff_id    = $_SESSION["staff_id"];    //スタッフID
$insert_flg  = $_GET["insert"];          //登録確認メッセージ表示フラグ
$group_kind  = $_SESSION["group_kind"];

/****************************/
//初期設定
/****************************/
//移動日
/*
$move_day = getdate();                   //現在の日付取得
$def_data["form_move_day"] = $move_day["year"]."-".$move_day["mon"]."-".$move_day["mday"];
$form->setDefaults($def_data);
*/
//表示行数
if($_POST["max_row"] != NULL){
    $max_row = $_POST["max_row"];
}else{
    $max_row = 5;
}

//削除行数
$del_history[] = NULL; 

//在庫移動後に自画面に遷移した場合、メッセージ表示
if ($_POST["hdn_first"] == null && $insert_flg == "true"){
    $insert_msg = "移動しました。";
    $form->addElement("hidden", "hdn_first", "1");
}else{
    $form->addElement("hidden", "hdn_first");
}

/****************************/
//行数追加処理
/****************************/
if($_POST["add_row_flg"] == "true"){
	if($_POST["max_row"] == NULL){
		//初期値はPOSTが無い為、
		$max_row = 6;
	}else{
		//最大行に、＋１する
    	$max_row = $_POST["max_row"]+5;
	}
    //行数追加フラグをクリア
    $add_row_data["add_row_flg"] = "";
    $form->setConstants($add_row_data);
}

/****************************/
//行削除処理
/****************************/
if($_POST["del_row"] != ""){

    //削除リストを取得
    $del_row = $_POST["del_row"];

    //削除履歴を配列にする。
    $del_history = explode(",", $del_row);

    //削除した行数
    $del_num     = count($del_history)-1;
}

//***************************/
//最大行数をhiddenにセット
/****************************/
$max_row_data["max_row"] = $max_row;

$form->setConstants($max_row_data);

/****************************/
//部品作成(固定)
/****************************/
//移動日
/*
$form->addElement(
    "text","form_move_day","",
    "size=\"34\"  
    style=\"color : #000000; 
    border : #ffffff 1px solid; 
    background-color: #ffffff; 
    text-align: left\" readonly'"
);
*/
//在庫移動日
$text[] =& $form->createElement("text", "y", "",
        "size=\"4\" maxLength=\"4\" style=\"$g_form_style\"
         onkeyup=\"changeText(this.form,'form_move_day_day[y]', 'form_move_day[m]',4)\"
         onFocus=\"onForm_today(this,this.form,'form_move_day[y]','form_move_day[m]','form_move_day[d]')\"
         onBlur=\"blurForm(this)\"");
$text[] =& $form->createElement("text", "m", "",
        "size=\"1\" maxLength=\"2\" style=\"$g_form_style\"
         onkeyup=\"changeText(this.form,'form_move_day[m]', 'form_move_day[d]',2)\"
         onFocus=\"onForm_today(this,this.form,'form_move_day[y]','form_move_day[m]','form_move_day[d]')\"
         onBlur=\"blurForm(this)\"");
$text[] =& $form->createElement("text", "d", "",
        "size=\"1\" maxLength=\"2\" style=\"$g_form_style\"
         onFocus=\"onForm_today(this,this.form,'form_move_day[y]','form_move_day[m]','form_move_day[d]')\"
         onBlur=\"blurForm(this)\""
);
$form->addGroup($text, "form_move_day", "", " - ");


//移動元倉庫(一覧表示)
$select_value = Select_Get($db_con,'ware');
$form->addElement('select', 'form_org_move', 'セレクトボックス', $select_value,$g_form_option_select);
//移動先倉庫(一覧表示)
$form->addElement('select', 'form_move', 'セレクトボックス', $select_value,$g_form_option_select);

//移動元倉庫の商品を全て表示
$form->addElement("submit","form_show_button","移動元倉庫の商品を全て表示");
//倉庫一括設定
$form->addElement("submit","form_set_button","倉庫一括設定");



//移動(遷移先2-4-107-1.php)
$form->addElement("button","form_move_button","移　動","onClick=\"javascript:Button_Submit('move_button_flg','#','true')\" $disabled");

//行追加リンク
$form->addElement("link","add_row_link","","#","追加","
    onClick=\"javascript:Button_Submit_1('add_row_flg', '#foot', 'true');\""
);

//hidden
$form->addElement("hidden", "del_row");             //削除行
$form->addElement("hidden", "add_row_flg");         //追加行フラグ
$form->addElement("hidden", "max_row");             //最大行数
$form->addElement("hidden", "goods_search_row");    //商品コード入力行
$form->addElement("hidden", "ware_select_row1");    //移動元倉庫プルダウン選択フラグ
$form->addElement("hidden", "ware_select_row2");    //移動先倉庫プルダウン選択フラグ
$form->addElement("hidden", "move_button_flg");     //移動ボタン押下判定
// エラーメッセージセット専用hidden
$form->addElement("text", "err_illegal_verify");    // 不正POST

/****************************/
//商品コード入力
/****************************/
if($_POST["goods_search_row"] != null){
	//商品データを取得する行
	$search_row = $_POST["goods_search_row"];

    $sql  = "SELECT \n";
    $sql .= "   t_goods.goods_id, \n";
    $sql .= "   t_goods.goods_cd, \n";
    $sql .= "   t_goods.goods_name, \n";
    $sql .= "   t_goods.unit \n";
    $sql .= "FROM \n";
    $sql .= "   t_goods \n";
    #2009-10-12 hashimoto-y
    $sql .= "   INNER JOIN t_goods_info   ON t_goods.goods_id  = t_goods_info.goods_id \n";

    $sql .= "WHERE \n";
    $sql .= "   t_goods.goods_cd = '".$_POST["form_goods_cd"][$search_row]."' \n";
    $sql .= "AND \n";
    $sql .= "   ( ";
    $sql .= "       t_goods.goods_id IN \n";
    $sql .= "       ( \n";
    $sql .= "           SELECT \n";
    $sql .= "               goods_id \n";
    $sql .= "           FROM \n";
    $sql .= "               t_price \n";
    $sql .= "           WHERE \n";
    $sql .= "               rank_cd = '1' \n";
    $sql .= "           AND \n";
    $sql .= ($group_kind == 2) ? " shop_id IN (".Rank_Sql().") \n" : " shop_id = $shop_id \n";
    $sql .= "       ) \n";
    $sql .= "       OR \n";
    $sql .= "       t_goods.goods_id IN \n";
    $sql .= "       ( \n";
    $sql .= "           SELECT \n";
    $sql .= "               goods_id \n";
    $sql .= "           FROM \n";
    $sql .= "               t_price \n";
    $sql .= "           WHERE \n";
    $sql .= "               rank_cd = '".$_SESSION["rank_cd"]."' \n";
    $sql .= "       ) \n";
    $sql .= "   ) \n";
    $sql .= "AND \n";
    #2009-10-12 hashimoto-y
    #$sql .= "t_goods.stock_manage = '1' \n";
    $sql .= "t_goods_info.stock_manage = '1' \n";
    $sql .= "AND \n";
    $sql .= "t_goods_info.shop_id = $shop_id ";

    $sql .= "AND \n";
    $sql .= "t_goods.accept_flg = '1' \n";
    $sql .= "AND \n";
    //直営は「有効」と「直営のみ有効」の商品
    if($group_kind == 2){
        $sql .= "    t_goods.state IN ('1', '3') \n";
    //FCは「有効」商品のみ
    }else{
        $sql .= "    t_goods.state = '1' \n";
    }
    $sql .= ";";

    $result = Db_Query($db_con, $sql);
    $data_num = pg_num_rows($result);

	//データが存在した場合、フォームにデータを表示
	if($data_num == 1){
    	$goods_data = pg_fetch_array($result);

		$set_goods_data["hdn_goods_id"][$search_row]         = $goods_data[0];   //商品ID
		$goods_id                                            = $goods_data[0];   //POSTする前に倉庫処理で使用する為
		$set_goods_data["form_goods_cd"][$search_row]        = $goods_data[1];   //商品CD
		$set_goods_data["form_goods_cname"][$search_row]     = $goods_data[2];   //商品名
		$set_goods_data["form_unit"][$search_row]            = $goods_data[3];   //単位
	}else{
		//データが無い場合は、初期化
		$set_goods_data["hdn_goods_id"][$search_row]         = "";
		$set_goods_data["form_goods_cd"][$search_row]        = "";
		$set_goods_data["form_goods_cname"][$search_row]     = "";
		$set_goods_data["form_unit"][$search_row]            = "";
		$set_goods_data["form_bstock_num"][$search_row]      = "";                 
		$set_goods_data["form_brstock_num"][$search_row]     = "";
		$set_goods_data["form_astock_num"][$search_row]      = "";                 
		$set_goods_data["form_arstock_num"][$search_row]     = "";   
	}
	$set_goods_data["goods_search_row"]                      = "";
	$form->setConstants($set_goods_data);
}

/****************************/
//倉庫選択処理
/****************************/
//商品コードが入力された場合でも処理を行う
if($_POST["ware_select_row1"] != null || $_POST["ware_select_row2"] != null || $_POST["goods_search_row"] != null){
	//移動元・移動先の識別判定
	if($_POST["ware_select_row1"] != null){
		//移動元倉庫
		$wname       = "form_b_ware";                            //移動元の倉庫名
		$sname       = "form_bstock_num";                        //移動元の在庫数名
		$rname       = "form_brstock_num";                       //移動元の引当数名
		$search_row  = $_POST["ware_select_row1"];               //在庫数を取得する行

		$all_ware_id = $_POST["form_org_move"];                  //移動元倉庫（一覧表示）
	}else if($_POST["ware_select_row2"] != null){
		//移動先倉庫
		$wname       = "form_a_ware";                            //移動先の倉庫名
		$sname       = "form_astock_num";                        //移動先の在庫数名
		$rname       = "form_arstock_num";                       //移動先の引当数名
		$search_row  = $_POST["ware_select_row2"];               //在庫数を取得する行

		$all_ware_id = $_POST["form_move"];                      //移動先倉庫（一覧表示）
	}

	//倉庫が選択された後に、商品コードを入力した場合、商品コードの行数を使用
	if($_POST["goods_search_row"] != null){
		$search_row = $_POST["goods_search_row"];                //在庫数を取得する行
		//移動元の存在判定
		if($_POST["form_b_ware"][$search_row] != NULL){
			$wname       = "form_b_ware";                            //移動元の倉庫名
			$sname       = "form_bstock_num";                        //移動元の在庫数名
			$rname       = "form_brstock_num";                       //移動元の引当数名
			$all_ware_id = $_POST["form_org_move"];                  //移動元倉庫（一覧表示）
			$b_ware_flg  = true;                                     //移動元・移動先が両方入力されているか判定フラグ
		}
		//移動先の存在判定
		if($_POST["form_a_ware"][$search_row] != NULL){
			$wname       = "form_a_ware";                            //移動先の倉庫名
			$sname       = "form_astock_num";                        //移動先の在庫数名
			$rname       = "form_arstock_num";                       //移動先の引当数名
			$all_ware_id = $_POST["form_move"];                      //移動先倉庫（一覧表示）
			$a_ware_flg  = true;                                     //移動元・移動先が両方入力されているか判定フラグ
		}	
	}else{
		//商品コードを入力した後に、倉庫を選択した場合
		$goods_id   = $_POST["hdn_goods_id"][$search_row];           //商品ID
	}
    $ware_id    = $_POST["$wname"][$search_row];                     //倉庫ID

/*
	//一覧表示で選択した倉庫とデータで選択した倉庫が違うか判定
	if($all_ware_id != $ware_id){
		//違う場合は、一覧の倉庫を初期化
		$set_data["form_org_move"]                      = "";
		$set_data["form_move"]                          = "";
	}
*/
	//商品と倉庫が選択されていれば処理開始
	if($goods_id != NULL && $ware_id != NULL){
	    $sql  = "SELECT";
	    $sql .= "   stock_num,";
		$sql .= "   rstock_num";
	    $sql .= " FROM";
	    $sql .= "   t_stock";
	    $sql .= " WHERE";
	    $sql .= ($group_kind == "2") ? " shop_id IN (".Rank_Sql().") " : "   shop_id = $shop_id";
	    $sql .= "   AND";
	    $sql .= "   ware_id = $ware_id";
	    $sql .= "   AND";
	    $sql .= "   goods_id = $goods_id";
	    $sql .= ";";

	    $result = Db_Query($db_con, $sql);
		//該当する商品に在庫があるか
	    if(pg_num_rows($result) != 0){
	        $stock_num  = pg_fetch_result($result,0,0);
			$rstock_num = pg_fetch_result($result,0,1);
	    }
	    $set_data["$sname"][$search_row] = ($stock_num != NULL)? $stock_num : 0;      //現在個数
		$set_data["$rname"][$search_row] = ($rstock_num != NULL)? $rstock_num : 0;    //引当数

        //aoyama 2009-07-09
        //変数の初期化
        $stock_num = "";
        $rstock_num = "";

	}else{
		//選択されていない場合は、初期化
		$set_data["$sname"][$search_row] = "";                 
		$set_data["$rname"][$search_row] = "";   
	}

	//移動元・移動先が両方入力されている場合、移動先しか在庫数を取得していない為、移動元も取得する
	if($b_ware_flg == true && $a_ware_flg == true){
		$wname       = "form_b_ware";                            //移動元の倉庫名
		$sname       = "form_bstock_num";                        //移動元の在庫数名
		$rname       = "form_brstock_num";                       //移動元の引当数名
		$ware_id     = $_POST["$wname"][$search_row];            //倉庫ID
		//商品と倉庫が選択されていれば処理開始
		if($goods_id != NULL && $ware_id != NULL){
		    $sql  = "SELECT";
		    $sql .= "   stock_num,";
			$sql .= "   rstock_num";
		    $sql .= " FROM";
		    $sql .= "   t_stock";
		    $sql .= " WHERE";
	        $sql .= ($group_kind == "2") ? " shop_id IN (".Rank_Sql().") " : "   shop_id = $shop_id";
		    $sql .= "   AND";
		    $sql .= "   ware_id = $ware_id";
		    $sql .= "   AND";
		    $sql .= "   goods_id = $goods_id";
		    $sql .= ";";

		    $result = Db_Query($db_con, $sql);
			//該当する商品に在庫があるか
		    if(pg_num_rows($result) != 0){
		        $stock_num  = pg_fetch_result($result,0,0);
				$rstock_num = pg_fetch_result($result,0,1);
		    }
		    $set_data["$sname"][$search_row] = ($stock_num != NULL)? $stock_num : 0;      //現在個数
			$set_data["$rname"][$search_row] = ($rstock_num != NULL)? $rstock_num : 0;    //引当数
		}else{
			//選択されていない場合は、初期化
			$set_data["$sname"][$search_row] = "";                 
			$set_data["$rname"][$search_row] = "";   
		}
	}
	
	$set_data["ware_select_row1"]                      = "";
	$set_data["ware_select_row2"]                      = "";
	$form->setConstants($set_data);
}

/****************************/
//移動元倉庫の商品を全て表示ボタン押下処理
/****************************/
if($_POST["form_show_button"] == "移動元倉庫の商品を全て表示"){
	$org_ware_id = $_POST["form_org_move"];                //移動元倉庫（一覧表示）
	$ware_id     = $_POST["form_move"];                    //移動先倉庫（一覧表示）
	
	//移動元・移動先が選択されている場合のみ処理を行う
	if($org_ware_id != NULL && $ware_id != NULL){
		//対象の倉庫の全商品データを取得SQL
		$sql  = "SELECT";
	    $sql .= "   b_stock.goods_id,";
		$sql .= "   b_stock.goods_cd,";
		$sql .= "   b_stock.goods_name,";
		$sql .= "   b_stock.ware_id,";
		$sql .= "   b_stock.stock_num,";
		$sql .= "   b_stock.rstock_num,";
		$sql .= "   b_stock.unit,";
		$sql .= "   a_stock.ware_id,";
		$sql .= "   a_stock.stock_num,";
		$sql .= "   a_stock.rstock_num";
	    $sql .= " FROM";

	    $sql .= "   (SELECT ";
		$sql .= "       t_goods.goods_cd,";
		$sql .= "       t_goods.goods_name,";
		$sql .= "       t_ware.ware_id,";
		$sql .= "       t_stock.stock_num,";
		$sql .= "       t_stock.rstock_num,";
		$sql .= "       t_goods.unit,";
		$sql .= "       t_stock.goods_id ";
		$sql .= "   FROM ";
		$sql .= "       t_stock ";
		$sql .= "       INNER JOIN t_ware ON t_stock.ware_id = t_ware.ware_id ";
		$sql .= "       INNER JOIN t_goods ON t_stock.goods_id = t_goods.goods_id ";
        #2009-10-12 hashimoto-y
        $sql .= "       INNER JOIN t_goods_info   ON t_goods.goods_id  = t_goods_info.goods_id \n";

	    $sql .= "   WHERE";
	    $sql .= ($group_kind == "2") ? "      t_stock.shop_id IN (".Rank_Sql().") " : "       t_stock.shop_id = $shop_id";
	    $sql .= "   AND";
	    $sql .= "       t_stock.ware_id = $org_ware_id";
	    $sql .= "   AND ";
        #2009-10-12 hashimoto-y
	    #$sql .= "       t_goods.stock_manage = '1' ";
        $sql .= "       t_goods_info.stock_manage = '1' \n";
        $sql .= "   AND \n";
        $sql .= "       t_goods_info.shop_id = $shop_id ";

	    $sql .= "   AND ";
	    $sql .= "       t_goods.accept_flg = '1' ";
        //直営は本部有効商品と直営商品が対象
        if($group_kind == "2"){
            if($type == '1'){
	            $sql .= "   AND ";
                $sql .= "   t_goods.state IN ('1', '3') \n";
            }elseif($type == '2'){
	            $sql .= "   AND ";
                $sql .= "   t_goods.state = '2'\n";
            }
        //FCは本部有効商品とFC商品が対象
        }else{
	        $sql .= "   AND ";
            if($type == '1'){
                $sql .= "   t_goods.state = '1' \n";
            }elseif($type == '2'){
                $sql .= "   t_goods.state = '2'\n";
            }else{
                $sql .= "   t_goods.state IN ('1', '2') \n";
            }
        }
	    $sql .= "   )AS b_stock ";

		$sql .= "   LEFT JOIN ";
		$sql .= "   (SELECT ";
		$sql .= "       t_ware.ware_id,";
		$sql .= "       t_stock.stock_num,";
		$sql .= "       t_stock.rstock_num,";
		$sql .= "       t_stock.goods_id ";
		$sql .= "   FROM ";
		$sql .= "       t_stock ";
		$sql .= "       INNER JOIN t_ware ON t_stock.ware_id = t_ware.ware_id ";
		$sql .= "       INNER JOIN t_goods ON t_stock.goods_id = t_goods.goods_id ";
        #2009-10-12 hashimoto-y
        $sql .= "       INNER JOIN t_goods_info   ON t_goods.goods_id  = t_goods_info.goods_id \n";

	    $sql .= "   WHERE";
	    $sql .= ($group_kind == "2") ? "      t_stock.shop_id IN (".Rank_Sql().") " : "       t_stock.shop_id = $shop_id";
	    $sql .= "   AND";
	    $sql .= "       t_stock.ware_id = $ware_id";
	    $sql .= "   AND ";
        #2009-10-12 hashimoto-y
	    #$sql .= "       t_goods.stock_manage = '1' ";
        $sql .= "       t_goods_info.stock_manage = '1' \n";
        #2009-10-15 hashimoto-y 修正漏れ
        $sql .= "   AND \n";
        $sql .= "       t_goods_info.shop_id = $shop_id ";

	    $sql .= "   AND ";
	    $sql .= "       t_goods.accept_flg = '1' ";
        //直営は本部有効商品と直営商品が対象
        if($group_kind == "2"){
            if($type == '1'){
	            $sql .= "   AND ";
                $sql .= "   t_goods.state IN ('1', '3') \n";
            }elseif($type == '2'){
	            $sql .= "   AND ";
                $sql .= "   t_goods.state = '2'\n";
            }
        //FCは本部有効商品とFC商品が対象
        }else{
	        $sql .= "   AND ";
            if($type == '1'){
                $sql .= "   t_goods.state = '1' \n";
            }elseif($type == '2'){
                $sql .= "   t_goods.state = '2'\n";
            }else{
                $sql .= "   t_goods.state IN ('1', '2') \n";
            }
        }
	    $sql .= "   )AS a_stock ";

		$sql .= "   ON b_stock.goods_id = a_stock.goods_id ";
		$sql .= "ORDER BY b_stock.goods_cd;";

	    $result = Db_Query($db_con, $sql);
		$data_list = Get_Data($result, 2);

		for($i=0;$i<count($data_list);$i++){
			$set_data["hdn_goods_id"][$i]     = $data_list[$i][0];  //商品ID
			$set_data["form_goods_cd"][$i]    = $data_list[$i][1];  //商品CD
			$set_data["form_goods_cname"][$i] = $data_list[$i][2];  //商品名
			$set_data["form_b_ware"][$i]      = $org_ware_id;       //移動元倉庫
			$set_data["form_bstock_num"][$i]  = ($data_list[$i][4] != NULL)? $data_list[$i][4] : 0;  //現在個数（移動元）
			$set_data["form_brstock_num"][$i] = ($data_list[$i][5] != NULL)? $data_list[$i][5] : 0;  //引当数（移動元）
			$set_data["form_unit"][$i]        = $data_list[$i][6];  //単位
			$set_data["form_a_ware"][$i]      = $ware_id;           //移動先倉庫
			$set_data["form_astock_num"][$i]  = ($data_list[$i][8] != NULL)? $data_list[$i][8] : 0;  //現在個数（移動先）
			$set_data["form_arstock_num"][$i] = ($data_list[$i][9] != NULL)? $data_list[$i][9] : 0;  //引当数（移動先）
		}
		//全商品データ分の行数を取得
		$max_row = count($data_list);
		$set_data["max_row"] = $max_row;                       //表示行数
		$form->setConstants($set_data);
	}else{
		//移動元・移動先が選択されていない場合はエラー表示
		if($org_ware_id == NULL){
			$warning1 = "移動元倉庫を選択して下さい。";
		}
		if($ware_id == NULL){
			$warning2 = "移動先倉庫を選択して下さい。";
		}
	}

/****************************/
//一括設定ボタン押下処理
/****************************/
}elseif($_POST["form_set_button"] == "倉庫一括設定"){

    //移動元倉庫
    $bfr_ware_id = ($_POST["form_org_move"] != null)? $_POST["form_org_move"] : "null";

    //移動先倉庫
    $aft_ware_id = ($_POST["form_move"] != null)? $_POST["form_move"] : "null";

    //現在表示されている一覧に倉庫をセットする。
    for($i = 0; $i < $max_row; $i++){
        //表示行判定
        if(!in_array("$i", $del_history)){
            $set_data["form_b_ware"][$i] = $bfr_ware_id;
            $set_data["form_a_ware"][$i] = $aft_ware_id;

            //既に商品が入力されている場合
            if($_POST["hdn_goods_id"][$i] != null){
                $bfr_data = Get_Stock_Num($db_con, $_POST["hdn_goods_id"][$i], $bfr_ware_id);
                $atr_data = Get_Stock_Num($db_con, $_POST["hdn_goods_id"][$i], $aft_ware_id);

                //移動元
                $set_data["form_bstock_num"][$i]  = $bfr_data[0];    //在庫数
                $set_data["form_brstock_num"][$i] = $bfr_data[1];    //引当数

                //移動先
                $set_data["form_astock_num"][$i]  = $atr_data[0];    //在庫数
                $set_data["form_arstock_num"][$i] = $atr_data[1];    //引当数

            }
        }
    }

    $form->setConstants($set_data);
}

/****************************/
//移動ボタン押下処理
/****************************/
if($_POST["move_button_flg"] == "true"){

    //hashimoto
    //初期化漏れ
    $goods_id = array();

    // フラグをクリア
    $clear_hdn_data["move_button_flg"] = "";
    $form->setConstants($clear_hdn_data);

	//データ情報取得
	$move_day                     = $_POST["form_move_day"];         //移動日

	$j = 0;
    for($i = 0; $i < $max_row; $i++){
        if($_POST["form_goods_cd"][$i] != null){
            $goods_id[$j]         = $_POST["hdn_goods_id"][$i];      //商品ID
            $goods_cname[$j]       = $_POST["form_goods_cname"][$i];   //商品名
			$b_ware[$j]           = $_POST["form_b_ware"][$i];       //移動元倉庫
			$bstock_num[$j]       = $_POST["form_bstock_num"][$i];   //現在個数（移動元）
			$brstock_num[$j]      = $_POST["form_brstock_num"][$i];  //引当数（移動元）
			$move_num[$j]         = $_POST["form_move_num"][$i];     //移動数
			$a_ware[$j]           = $_POST["form_a_ware"][$i];       //移動先倉庫
			$astock_num[$j]       = $_POST["form_astock_num"][$i];   //現在個数（移動先）
			$arstock_num[$j]      = $_POST["form_arstock_num"][$i];  //引当数（移動先）
            $j++;
        }
    }

	/****************************/
    //エラーチェック(PHP)
    /****************************/
	$error_flg = false;                                         //エラー判定フラグ

    // ■ 商品コードの編集中に移動ボタンが押下された場合の対処処理
    // 移動ボタンが押された、かつ商品検索フラグがある場合
    if ($_POST["move_button_flg"] == "true" && $_POST["goods_search_row"] != null){

        // 検索した行数を取得
        $search_row = $_POST["goods_search_row"];

        // hiddenの商品ID配列の該当行に商品IDが格納されている場合
        if ($_POST["hdn_goods_id"][$search_row] != null){
            // hiddenに格納されている商品IDとPOSTされた商品コードの整合性をチェック
            $sql  = "SELECT \n";
            $sql .= "   goods_id \n";
            $sql .= "FROM \n";
            $sql .= "   t_goods \n";
            $sql .= "WHERE \n";
            $sql .= "   goods_id = ".$_POST["hdn_goods_id"][$search_row]." \n";
            $sql .= "AND \n";
            $sql .= "   goods_cd = '".$_POST["form_goods_cd"][$search_row]."' \n";
            $sql .= "AND ";
            $sql .= "   public_flg = 't' \n";
            #2009-10-12 hashimoto-y
            #$sql .= "AND ";
            #$sql .= "   stock_manage = '1' \n";

            $sql .= "AND \n";
            $sql .= "   ( ";
            $sql .= "       t_goods.goods_id IN \n";
            $sql .= "       ( \n";
            $sql .= "           SELECT \n";
            $sql .= "               goods_id \n";
            $sql .= "           FROM \n";
            $sql .= "               t_price \n";
            $sql .= "           WHERE \n";
            $sql .= "               rank_cd = '1' \n";
            $sql .= "           AND \n";
            $sql .= ($group_kind == 2) ? " shop_id IN (".Rank_Sql().") \n" : " shop_id = $shop_id \n";
            $sql .= "       ) \n";
            $sql .= "       OR \n";
            $sql .= "       t_goods.goods_id IN \n";
            $sql .= "       ( \n";
            $sql .= "           SELECT \n";
            $sql .= "               goods_id \n";
            $sql .= "           FROM \n";
            $sql .= "               t_price \n";
            $sql .= "           WHERE \n";
            $sql .= "               rank_cd = '".$_SESSION["rank_cd"]."' \n";
            $sql .= "       ) \n";
            $sql .= "   ) \n";
            $sql .= ";";
            $res  = Db_Query($db_con, $sql);
            $num  = pg_num_rows($res);
            // 結果を不正POSTフラグに
            $illegal_verify_flg = ($num > 0) ? false : true;
        // hiddenの請求先ID配列の該当キーに請求先IDが格納されていない場合
        }else{
            // 不正POSTフラグをtrueに
            $illegal_verify_flg = true;
        }

        // 不正POSTフラグtrueの場合はエラーをセット
        if ($illegal_verify_flg == true){
            $form->setElementError("err_illegal_verify", "商品情報取得前に 移動ボタン が押されました。<br>操作をやり直してください。");
            $error_flg = true;
        }

    }

    //■移動日
    //半角、必須チェック
    $form->addGroupRule("form_move_day", array(
        "y"   => array(
                array($err_message, "required"),
                array($err_message, "numeric")
                ),
        "m"   => array(
                array($err_message, "required"),
                array($err_message, "numeric")
                ),
        "d"   => array(
                array($err_message, "required"),
                array($err_message, "numeric")
                ),
    ));

    //日付妥当性チェック
    if(!checkdate((int)$move_day[m], (int)$move_day[d], (int)$move_day[y])){
        $form->setElementError("form_move_day","移動日の日付は妥当ではありません。");
    }else{
        //月次更新
        $sql  = "SELECT\n";
        $sql .= "   MAX(close_day) \n";
        $sql .= "FROM\n";
        $sql .= "   t_sys_renew \n";
        $sql .= "WHERE\n";
        $sql .= "   shop_id = $shop_id\n";
        $sql .= "   AND\n";
        $sql .= "   renew_div = '2'\n";
        $sql .= ";";
        $result = Db_Query($db_con, $sql);
        $renew_date = pg_fetch_result($result,0,0);
        $renew_date = ($renew_date == null) ? START_DAY : $renew_date;
/*
        //在庫調整
        if($renew_date == null){
            $sql  = "SELECT\n";
            $sql .= "   MAX(work_day) \n";
            $sql .= "FROM\n";
            $sql .= "   t_stock_hand\n";
            $sql .= "WHERE\n";
            $sql .= "   shop_id = $shop_id\n";
            $sql .= "    AND\n";
            $sql .= "   work_div = '6'\n";
            $sql .= "   AND\n";
            $sql .= "   adjust_reason = 1\n";
            $sql .= ";\n";

            $result = Db_Query($db_con, $sql);
            $renew_date = pg_fetch_result($result, 0,0);
        }
*/
        $move_day[m] = str_pad($move_day[m],2,0,STR_PAD_LEFT);
        $move_day[d] = str_pad($move_day[d],2,0,STR_PAD_LEFT);
        $move_date = implode("-",$move_day);

        if($renew_date >=$move_date){
            $form->setElementError("form_move_day","移動日の日付は妥当ではありません。");
        }
    }

	//商品選択チェック
    for($i = 0; $i < count($goods_id); $i++){
        if($goods_cname[$i] != null){
           $input_error_flg = true;
        }
    }
    if($input_error_flg != true){
        $goods_error0 ="商品が一つも選択されていません。";
		$error_flg = true;
    }

    //移動元・移動数・移動先入力チェック
    for($i = 0; $i < count($goods_id); $i++){
		//必須チェック
        if($goods_id[$i] != null && ($move_num[$i] == null || $b_ware[$i] == null || $a_ware[$i] == null)){
			$goods_error1 = "在庫移動入力に移動元倉庫名と移動数と移動先倉庫名は必須です。";
			$error_flg = true;
        }

        //hashimoto
        //在庫数が表示される前に移動を押した場合
        if($bstock_num[$i] == null || $brstock_num[$i] == null || $astock_num[$i] == null || $arstock_num[$i] == null){
            $goods_error1 = "移動元倉庫もしくは移動先倉庫の在庫数が正しく表示された後に「移動」をクリックして下さい。";
            $error_flg = true;
        }

        //移動数半角数字チェック
        if(!ereg("^[0-9]+$",$move_num[$i]) && $move_num[$i] != null){
			$goods_error2 = "移動数は半角数字のみです。";
			$error_flg = true;
        }

		//移動元と移動先が同じか判定
		if($b_ware[$i] == $a_ware[$i]){
			$goods_error3 = "移動元倉庫と移動先倉庫が同じです。";
			$error_flg = true;
		}
    }

	//エラーの場合はこれ以降の表示処理を行なわない
    if($error_flg == false && $form->validate()){
		Db_Query($db_con, "BEGIN");

		for($i = 0; $i < count($goods_id); $i++){
			//受払テーブル登録（移動元）
            $sql  = " INSERT INTO t_stock_hand (";
            $sql .= "    goods_id,";
            $sql .= "    enter_day,";
            $sql .= "    work_day,";
            $sql .= "    work_div,";
            $sql .= "    ware_id,";
            $sql .= "    io_div,";
            $sql .= "    num,";
            $sql .= "    staff_id,";
            //aoyama-n 2009-07-10
            $sql .= "    client_cname,";
            $sql .= "    shop_id";
            $sql .= ")VALUES(";
            $sql .= "    $goods_id[$i],";
            $sql .= "    '$move_date',";
            $sql .= "    '$move_date',";
            $sql .= "    '5',";
            $sql .= "    $b_ware[$i],";
            $sql .= "    '2',";
            $sql .= "    $move_num[$i],";
            $sql .= "    $staff_id,";
            //aoyama-n 2009-07-10
            //移動先倉庫名を残す
            $sql .= "    (SELECT ware_name FROM t_ware WHERE ware_id = $a_ware[$i]),";
            $sql .= "    $shop_id";
            $sql .= ");";

            $result = Db_Query($db_con, $sql);
            if($result == false){
                Db_Query($db_con, "ROLLBACK");
                exit;
            }

			//受払テーブル登録（移動先）
            $sql  = " INSERT INTO t_stock_hand (";
            $sql .= "    goods_id,";
            $sql .= "    enter_day,";
            $sql .= "    work_day,";
            $sql .= "    work_div,";
            $sql .= "    ware_id,";
            $sql .= "    io_div,";
            $sql .= "    num,";
            $sql .= "    staff_id,";
            //aoyama-n 2009-07-10
            $sql .= "    client_cname,";
            $sql .= "    shop_id";
            $sql .= ")VALUES(";
            $sql .= "    $goods_id[$i],";
            $sql .= "    '$move_date',";
            $sql .= "    '$move_date',";
            $sql .= "    '5',";
            $sql .= "    $a_ware[$i],";
            $sql .= "    '1',";
            $sql .= "    $move_num[$i],";
            $sql .= "    $staff_id,";
            //aoyama-n 2009-07-10
            //移動元倉庫名を残す
            $sql .= "    (SELECT ware_name FROM t_ware WHERE ware_id = $b_ware[$i]),";
            $sql .= "    $shop_id";
            $sql .= ");";

            $result = Db_Query($db_con, $sql);
            if($result == false){
                Db_Query($db_con, "ROLLBACK");
                exit;
            }
		}

		Db_Query($db_con, "COMMIT");
        header("Location: ./2-4-107.php?insert=true");
	}
}

/****************************/
//部品作成（可変）
/****************************/
//行番号カウンタ
$row_num = 1;
$select_value = Select_Get($db_con,'ware');
for($i = 0; $i < $max_row; $i++){
    //表示行判定
    if(!in_array("$i", $del_history)){
        $del_data = $del_row.",".$i;

		//商品コード      
	    $form->addElement(
	        "text","form_goods_cd[$i]","","size=\"10\" maxLength=\"8\"
	        style=\"$g_form_style\" $g_form_option
	        onChange=\"goods_search_2(this.form, 'form_goods_cd', 'goods_search_row', $i, $row_num)\""
	    );

		//商品名
		$form->addElement(
	        "text","form_goods_cname[$i]","",
	        "size=\"34\"  
	        style=\"color : #000000; 
	        border : #ffffff 1px solid; 
	        background-color: #ffffff; 
	        text-align: left\" readonly'"
	    );

		//移動元倉庫
		$form->addElement('select', "form_b_ware[$i]", 'セレクトボックス', $select_value,
			"onKeyDown=\"chgKeycode();\" onChange =\"goods_search_2(this.form, 'form_goods_cd', 'ware_select_row1', $i, $row_num);window.focus();\""
		);

        //倉庫が選択されている場合はそのまま、選択されていない場合は、一括設定で選択した倉庫をセット
        if($_POST["form_b_ware"][$i] != null){
            $set_data["form_b_ware"][$i] = $_POST["form_b_ware"][$i];
        }elseif($_POST["add_row_flg"] == "true" && $i > $max_row-6){
            $set_data["form_b_ware"][$i] = $_POST["form_org_move"];
        }
        $form->setConstants($set_data);



		//在庫数(移動元)
		$form->addElement(
	        "text","form_bstock_num[$i]","",
	        "size=\"11\"  
	        style=\"color : #000000; 
	        border : #ffffff 1px solid; 
	        background-color: #ffffff; 
	        text-align: right\" readonly'"
	    );

		//引当数(移動元)
		$form->addElement(
	        "text","form_brstock_num[$i]","",
	        "size=\"11\"  
	        style=\"color : #000000; 
	        border : #ffffff 1px solid; 
	        background-color: #ffffff; 
	        text-align: right\" readonly'"
	    );

		//移動数
	    $form->addElement(
	        "text","form_move_num[$i]","",
	        "class=\"money\" size=\"11\" maxLength=\"5\" 
	        style=\"$g_form_style\" $g_form_option"
	    );

		//単位
		$form->addElement(
	        "text","form_unit[$i]","",
	        "size=\"11\"  
	        style=\"color : #000000; 
	        border : #ffffff 1px solid; 
	        background-color: #ffffff; 
	        text-align: left\" readonly'"
	    );

		//移動先倉庫
		$form->addElement('select', "form_a_ware[$i]", 'セレクトボックス', $select_value,
			"onKeyDown=\"chgKeycode();\" onChange =\"goods_search_2(this.form, 'form_goods_cd', 'ware_select_row2', $i, $row_num);window.focus();\""
		);

        //倉庫が選択されている場合はそのまま、選択されていない場合は、一括設定で選択した倉庫をセット
        if($_POST["form_a_ware"][$i] != null){
            $set_data["form_a_ware"][$i] = $_POST["form_a_ware"][$i];   
        }elseif($_POST["add_row_flg"] == "true" && $i > $max_row-6){
            $set_data["form_a_ware"][$i] = $_POST["form_move"];
        }       
        $form->setConstants($set_data);



		//在庫数(移動先)
		$form->addElement(
	        "text","form_astock_num[$i]","",
	        "size=\"11\"  
	        style=\"color : #000000; 
	        border : #ffffff 1px solid; 
	        background-color: #ffffff; 
	        text-align: right\" readonly'"
	    );

		//引当数(移動先)
		$form->addElement(
	        "text","form_arstock_num[$i]","",
	        "size=\"11\"  
	        style=\"color : #000000; 
	        border : #ffffff 1px solid; 
	        background-color: #ffffff; 
	        text-align: right\" readonly'"
	    );

		//検索リンク
		$form->addElement(
		    "link","form_search[$i]","","#","検索",
		    "onClick=\"return Open_SubWin_2('../dialog/2-0-210.php', Array('form_goods_cd[$i]','goods_search_row'), 500, 450,'true',$shop_id,$i, $row_num);\""
		);

        //削除リンク
        //最終行を削除する場合、削除した後の最終行に合わせる
        if($row_num == $max_row-$del_num){
            $form->addElement(
                "link","form_del_row[$i]","",
                "#","削除",
                "TABINDEX=-1 
                onClick=\"javascript:Dialogue_3('削除します。', '$del_data', 'del_row' ,$row_num-1);return false;\"");

        //最終行以外を削除する場合、削除する行と同じNOの行に合わせる
        }else{
            $form->addElement(
                "link","form_del_row[$i]","","#",
                "削除",
                "TABINDEX=-1 
                onClick=\"javascript:Dialogue_3('削除します。', '$del_data', 'del_row' ,$row_num);return false;\""                                  );
        }




		//商品ID
	    $form->addElement("hidden","hdn_goods_id[$i]");

		/****************************/
        //表示用HTML作成
        /****************************/
        $html .= "<tr class=\"Result1\">";
        $html .=    "<A NAME=$row_num><td align=\"right\">$row_num</td>";
        $html .=    "<td align=\"left\">";
        $html .=        $form->_elements[$form->_elementIndex["form_goods_cd[$i]"]]->toHtml();
        $html .=    "（";
        $html .=        $form->_elements[$form->_elementIndex["form_search[$i]"]]->toHtml();
        $html .=    "）";
        $html .=    "<br>";
        $html .=        $form->_elements[$form->_elementIndex["form_goods_cname[$i]"]]->toHtml();
        $html .=    "</td>";
		$html .=    "<td align=\"left\">";
	    $html .=        $form->_elements[$form->_elementIndex["form_b_ware[$i]"]]->toHtml();
	    $html .=    "</td>";
        $html .=    "<td align=\"right\">";
        $html .=        $form->_elements[$form->_elementIndex["form_bstock_num[$i]"]]->toHtml();
		$html .=    "<br>";
		$html .=        $form->_elements[$form->_elementIndex["form_brstock_num[$i]"]]->toHtml();
        $html .=    "</td>";
        $html .=    "<td align=\"right\">";
        $html .=        $form->_elements[$form->_elementIndex["form_move_num[$i]"]]->toHtml();
        $html .=    "</td>";
		$html .=    "<td align=\"left\">";
        $html .=        $form->_elements[$form->_elementIndex["form_unit[$i]"]]->toHtml();
        $html .=    "</td>";
        $html .=    "<td align=\"left\">";
        $html .=        $form->_elements[$form->_elementIndex["form_a_ware[$i]"]]->toHtml();
        $html .=    "</td>";
        $html .=    "<td align=\"right\">";
        $html .=        $form->_elements[$form->_elementIndex["form_astock_num[$i]"]]->toHtml();
		$html .=    "<br>";
		$html .=        $form->_elements[$form->_elementIndex["form_arstock_num[$i]"]]->toHtml();
        $html .=    "</td>";
        $html .= "  <td align=\"center\">";
        $html .=        $form->_elements[$form->_elementIndex["form_del_row[$i]"]]->toHtml();
        $html .= "  </td>";
        $html .= "</tr>";

        //行番号を＋１
        $row_num = $row_num+1;
    }
}

/****************************/
//HTMLヘッダ
/****************************/
$html_header = Html_Header($page_title);

/****************************/
//HTMLフッタ
/****************************/
$html_footer = Html_Footer();

/****************************/
//画面ヘッダー作成
/****************************/
$page_header = Create_Header($page_title);
/*
print "<pre>";
print_r ($_POST);
print "</pre>";
*/
// Render関連の設定
$renderer =& new HTML_QuickForm_Renderer_ArraySmarty($smarty);
$form->accept($renderer);

//form関連の変数をassign
$smarty->assign('form',$renderer->toArray());

//その他の変数をassign
$smarty->assign('var',array(
	'html_header'   => "$html_header",
	'page_header'   => "$page_header",
	'html_footer'   => "$html_footer",
	'html'          => "$html",
	'warning1'      => "$warning1",
	'warning2'      => "$warning2",
	'goods_error0'  => "$goods_error0",
	'goods_error1'  => "$goods_error1",
	'goods_error2'  => "$goods_error2",
	'goods_error3'  => "$goods_error3",
	'insert_msg'    => "$insert_msg",
));

//テンプレートへ値を渡す
$smarty->display(basename($_SERVER[PHP_SELF] .".tpl"));

//商品の倉庫ごとの在庫数と引当数を抽出
function Get_Stock_Num($db_con, $goods_id, $ware_id){

    $sql  = "SELECT \n";
    $sql .= "   stock_num, \n";
    $sql .= "   rstock_num \n";
    $sql .= "FROM \n";
    $sql .= "   t_stock \n";
    $sql .= "WHERE \n";
    $sql .= "   shop_id = ".$_SESSION["client_id"]." \n";
    $sql .= "AND \n";
    $sql .= "   ware_id = $ware_id \n";
    $sql .= "AND \n";
    $sql .= "   goods_id = $goods_id \n";
    $sql .= ";";
    $result = Db_Query($db_con, $sql);

    if(pg_num_rows($result) > 0){
        return pg_fetch_array($result, 0);
    }else{
        return array(0,0);
    }
}

?>
